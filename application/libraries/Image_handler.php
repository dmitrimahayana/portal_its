<?php/** File: SimpleImage.php* Author: Simon Jarvis* Copyright: 2006 Simon Jarvis* Date: 08/11/06* Link: http://www.white-hat-web-design.co.uk/articles/php-image-resizing.php** This program is free software; you can redistribute it and/or* modify it under the terms of the GNU General Public License* as published by the Free Software Foundation; either version 2* of the License, or (at your option) any later version.** This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the* GNU General Public License for more details:* http://www.gnu.org/licenses/gpl.html**/class Image_handler {	public function __construct($options=null) {		$this->CI = &get_instance();	}		public function deleteImage($file)//gets the job done but you might want to add error checking and security	{		// Check session is Admin or not		/* Deleting the images */		$success =unlink(FCPATH.'files/images/' .$file);		//info to see if it is doing what it is supposed to			$info->success = $success;		$info->path =base_url().'files/images/' .$file;		$info->file =is_file(FCPATH.'files/images/' .$file);		if (IS_AJAX) 		{			//I don't think it matters if this is set but good for error checking in the console/firebug			echo json_encode(array($info));		}		else 		{     			//here you will need to decide what you want to show for a successful delete			$file_data['delete_data'] = $file;		}		/* Deleting the thumbnails */		$success =unlink(FCPATH.'files/images/thumbnails/' .$file);		/* Insert record to database */		$this->CI->load->model('media_images_model');		$this->CI->media_images_model->delete_image($file);		return $success;	}		public function create_scaled_image($file_name, $options) {		if(!isset($options['prop']))		{			$options['prop'] = true;		}        $file_path = FCPATH.'files/images/'.$file_name;        $new_file_path = $options['upload_dir'].$file_name;        list($img_width, $img_height) = @getimagesize($file_path);        if (!$img_width || !$img_height) {            return false;        }		$scale = min(			$options['max_width'] / $img_width,			$options['max_height'] / $img_height		);		if ($scale >= 1) {			if ($file_path !== $new_file_path) {				return copy($file_path, $new_file_path);			}			return true;		}		if($options['prop']===true)		{			$new_width = $img_width * $scale;			$new_height = $img_height * $scale;		}		else		{			$new_width = $options['max_width'];			$new_height = $options['max_height'];		}        $new_img = @imagecreatetruecolor($new_width, $new_height);        switch (strtolower(substr(strrchr($file_name, '.'), 1))) {            case 'jpg':            case 'jpeg':                $src_img = @imagecreatefromjpeg($file_path);                $write_image = 'imagejpeg';                $image_quality = isset($options['jpeg_quality']) ?                    $options['jpeg_quality'] : 75;                break;            case 'gif':                @imagecolortransparent($new_img, @imagecolorallocate($new_img, 0, 0, 0));                $src_img = @imagecreatefromgif($file_path);                $write_image = 'imagegif';                $image_quality = null;                break;            case 'png':                @imagecolortransparent($new_img, @imagecolorallocate($new_img, 0, 0, 0));                @imagealphablending($new_img, false);                @imagesavealpha($new_img, true);                $src_img = @imagecreatefrompng($file_path);                $write_image = 'imagepng';                $image_quality = isset($options['png_quality']) ?                    $options['png_quality'] : 9;                break;            default:                $src_img = null;        }        $success = $src_img && @imagecopyresampled(            $new_img,            $src_img,            0, 0, 0, 0,            $new_width,            $new_height,            $img_width,            $img_height        ) && $write_image($new_img, $new_file_path, $image_quality);        /* Free up memory (imagedestroy does not delete files): */        @imagedestroy($src_img);        @imagedestroy($new_img);        /* return $success; */		return array($new_width, $new_height);    }		var $image;	var $image_type; 	function load($filename) {		$image_info = getimagesize($filename);		$this->image_type = $image_info[2];		if( $this->image_type == IMAGETYPE_JPEG ) {			$this->image = imagecreatefromjpeg($filename);		} elseif( $this->image_type == IMAGETYPE_GIF ) {			$this->image = imagecreatefromgif($filename);		} elseif( $this->image_type == IMAGETYPE_PNG ) {			$this->image = imagecreatefrompng($filename);		}	}	function save($filename, $image_type=IMAGETYPE_JPEG, $compression=75, $permissions=null) {		if( $image_type == IMAGETYPE_JPEG ) {			imagejpeg($this->image,$filename,$compression);		} elseif( $image_type == IMAGETYPE_GIF ) {			imagegif($this->image,$filename);		} elseif( $image_type == IMAGETYPE_PNG ) {			imagepng($this->image,$filename);		}		if( $permissions != null) {			chmod($filename,$permissions);		}	}	function output($image_type=IMAGETYPE_JPEG) {		if( $image_type == IMAGETYPE_JPEG ) {			imagejpeg($this->image);		} elseif( $image_type == IMAGETYPE_GIF ) {			imagegif($this->image);		} elseif( $image_type == IMAGETYPE_PNG ) {			imagepng($this->image);		}	}	function getWidth() {		return imagesx($this->image);	}	function getHeight() {		return imagesy($this->image);	}	function resizeToHeight($height) {		$ratio = $height / $this->getHeight();		$width = $this->getWidth() * $ratio;		$this->resize($width,$height);	}	function resizeToWidth($width) {		$ratio = $width / $this->getWidth();		$height = $this->getheight() * $ratio;		$this->resize($width,$height);	}	function scale($scale) {		$width = $this->getWidth() * $scale/100;		$height = $this->getheight() * $scale/100;		$this->resize($width,$height);	}	function resize($width,$height) {		$new_image = imagecreatetruecolor($width, $height);		imagecopyresampled($new_image, $this->image, 0, 0, 0, 0, $width, $height, $this->getWidth(), $this->getHeight());		$this->image = $new_image;	}       }/* End of Image Handler Libraries *//* 31 Juli 2012 [10:38 AM] */